module Main where
--https://github.com/digital-asset/certification-damlfundamentals-capstone

import Daml.Script

type BankAccountKey =(Party,Text)
data BankDetails= BankDetails
  with
    bankName : Text
    address : Text
  
    -- Custom implementation of Show for BankDetails
instance Show BankDetails where
      show bd =
        "Bank Name: " <> bd.bankName <>
        "\nAddress: " <> bd.address

    -- Custom implementation of Eq for BankDetails
instance Eq BankDetails where
      (==) bd1 bd2 =
        bd1.bankName == bd2.bankName &&
       bd1.address == bd2.address


template Account
  with
    accountNumber : Text
    owner : Party
    balance : Int
    bank:BankDetails
  where
    signatory owner
    observer owner
   

    key (owner,accountNumber) : BankAccountKey
    maintainer key._1

    choice Transfer : (ContractId Account,ContractId Account)
      with
        recipient : Party
        amount : Int
        bankdet : BankDetails
        accno: Text
      controller owner,recipient
      do
        assertMsg "Amount must be greater than 0" (amount > 0) 
        assertMsg "Insufficient balance" (balance >= amount) 
        let updatedBalance = balance - amount
        rAccno<-create Account with accountNumber = accno, owner = recipient, balance = amount,bank=bankdet
        oAccno<-create Account with accountNumber=this.accountNumber,owner=owner,balance=updatedBalance,bank=bankdet
        return (rAccno,oAccno)
    nonconsuming choice GetBalance : Int
      controller owner
      do
        return balance

    choice Deposit : ContractId Account
      with
        amount : Int

      controller owner
      do
        assertMsg "Amount must be greater than 0" (amount > 0) 
        let updatedBalance = balance + amount
        create this with balance = updatedBalance
    
    nonconsuming choice GetCustomer : (ContractId Account,Account)
     with
       accno : Text
      controller owner
     do
       fetchByKey @Account (owner,accno)

type ItemIdentifier = (Party,Text)

template Item
  with
    owner : Party
    buyer:Party
    name : Text
    description : Text
    itemId: Text
    price:Optional Int
  where
    signatory owner 
    observer buyer
    
    key (owner,itemId) : ItemIdentifier
    maintainer key._1

    choice TransferOwnership :  ContractId Item
        with
          customer : Party
          owner:Party
          customerBalance: Optional Int
          offer:Optional Int
        controller owner,customer
        do
          assertMsg "Amount must be greater than 0" ( customerBalance>price)
          if (offer == None) then create this with owner=customer
          else create this with owner=customer,price=offer
                   
       --   create Customer with customer=customer,  name = cname, address = address

-- Modulirized testing

initializeBankDetails : Script BankDetails
initializeBankDetails = do
  return BankDetails
    { bankName = "abcco"
    , address = "abc street"
    }

data TestAccParties=TestAccParties with
  alice:Party
  bob:Party

setupParties:Script TestAccParties
setupParties =do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  return $TestAccParties with
    alice=alice
    bob=bob
--positive case  
--can create an account
canCreateAccount:Script(ContractId Account,Party)
canCreateAccount=do
  testaccParties<-setupParties
 -- alice <- allocateParty "Alice"
  bankdetails <-initializeBankDetails
  aliceCid<- submit testaccParties.alice do
    createCmd Account with accountNumber="001",owner=testaccParties.alice,balance=60,bank=bankdetails
  Some c <- queryContractId testaccParties.alice aliceCid
  assert $ c.accountNumber == "001"
  return (aliceCid,testaccParties.alice)

--positive case 
--can read balance
canReteriveBalance:Script()
canReteriveBalance=do
  testaccParties<-setupParties
 -- alice <- allocateParty "Alice"
  bankdetails <-initializeBankDetails
  (aliceCid,alice)<- canCreateAccount
  balance <- submit alice do
    exerciseCmd aliceCid GetBalance
  assert $ balance == 60

--positive case
--can deposit money
canDeposit:Script(ContractId Account,Party)
canDeposit=do
  testaccParties<-setupParties
 -- alice <- allocateParty "Alice"
  bankdetails <-initializeBankDetails
  (aliceCid,alice)<- canCreateAccount 
  alicenewCid<-submit alice do
    exerciseCmd aliceCid Deposit with amount=75
  balance <- submit alice do
    exerciseCmd alicenewCid GetBalance
  assert $ balance == 135
  return (alicenewCid,alice) 

--positive case
--can Transfer money
canTransfer:Script()
canTransfer=do
  testaccParties<-setupParties
 -- alice <- allocateParty "Alice"
  bankdetails <-initializeBankDetails
  (aliceCid,alice)<-canDeposit

  (bobCid,alicenewCid)<-submitMulti[alice,testaccParties.bob][] do
    exerciseCmd aliceCid Transfer with accno="002",recipient=testaccParties.bob,amount=60,bankdet=bankdetails
  return()

negativeTestScripts : Script ()
negativeTestScripts = do
  testaccParties<-setupParties
 -- alice <- allocateParty "Alice"
  bankdetails <-initializeBankDetails
  (aliceCid,alice)<-canDeposit

  --negative cases
  submitMultiMustFail[alice,testaccParties.bob][] do
    exerciseCmd aliceCid Transfer with accno="002",recipient=testaccParties.bob,amount=600,bankdet=bankdetails

  submitMultiMustFail[alice,testaccParties.bob][] do
    exerciseCmd aliceCid Transfer with accno="002",recipient=testaccParties.bob,amount=0,bankdet=bankdetails

  submitMultiMustFail[alice,testaccParties.bob][] do
    exerciseCmd aliceCid Transfer with accno="002",recipient=testaccParties.bob,amount=0,bankdet=bankdetails

  submitMustFail alice do
    exerciseCmd aliceCid Deposit with amount=0
  return()
itemTestScripts : Script ()
itemTestScripts = do
  testaccParties<-setupParties
  bankdetails <-initializeBankDetails
  (aliceCid,alice)<-canDeposit
  Some c <- queryContractId alice aliceCid
  balance <- submit alice do
    exerciseCmd aliceCid GetBalance
  assert $ c.accountNumber == "001"
  itemCid<- submit testaccParties.bob do
    createCmd Item with name="hotheels",owner=testaccParties.bob,buyer=alice,description="hond civic 2023 sti",itemId="HWCVI2023",price=Some 5
  Some currentItem <- queryContractId testaccParties.bob itemCid
  assert $ currentItem.itemId=="HWCVI2023"
 -- assert $ aliceAcc.balance==50
  itemnewCid<- submitMulti [testaccParties.bob,alice][] do
     exerciseCmd itemCid  TransferOwnership with customer=alice,owner=testaccParties.bob,customerBalance=Some balance,offer=Some 6 
  Some currentItem <- queryContractId alice itemnewCid
  assert $ currentItem.owner==alice

  return()
